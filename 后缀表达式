#include<iostream>
#define Maxsize 30
typedef struct Node {
	char data[Maxsize];
	int num;
}st;
typedef struct vode {
	int data[Maxsize];
	int num;
}num;
using namespace std;
int lcomp(char c) {
	switch (c) {
	case'=':return 0; break;
	case'(':return 1; break;
	case')':return 6; break;
	case'+':return 3; break;
	case'-':return 3; break;
	case'*':return 5; break;
	case'/':return 5; break;

	default:return -1; break;

	}
}
int rcomp(char c) {
	switch (c) {
	case'=':return 0; break;
	case'(':return 6; break;
	case')':return 1; break;
	case'+':return 2; break;
	case'-':return 2; break;
	case'*':return 4; break;
	case'/':return 4; break;
	default:return -1; break;

	}
}

bool inop(char c) {
	if (c == '+' || c == '-' || c == '*' || c == '/' || c == '(' || c == ')' || c == '=')
		return true;
	else
		return false;
}

void compere(char *exp,char *out) {
	st op;
	st post;
	int i = 0, j = 0;
	op.data[0] = '=';
	op.num = 1;
	post.num = 0;
	char c = exp[j];
	while (c != '\0') {
		if (!inop(c))
		{
			//post.data[post.num++] = c;
			//j++;
			while (c>='0'&&c<='9') {
				post.data[post.num++] = c;
				j++;
				c = exp[j];
			}
			post.data[post.num++] = '#';
		}
		else {
			if (lcomp(op.data[i])<rcomp(c))
			{
				i++;
				op.data[i] = c;
				j++;
				c = exp[j];
				
			}
			else if (lcomp(op.data[i])>rcomp(c)) {
				post.data[post.num] = op.data[i];
				i--;
				post.num++;
				
			}
			else if (lcomp(op.data[i]) == rcomp(c)) {
				i--;
				c = exp[++j];
				
			}
		}
	}
		while (op.data[i] != '=') {
			post.data[post.num] = op.data[i];
			i--;
			post.num++;
		}
		post.data[post.num] = '\0';
		int a = 0;
		for (; a <= post.num; a++) {
			out[a] = post.data[a];
	}
	
}
int aval(char* c, int x) {
	int d = 0;
	int o = 0;
	for (int n = 0; x>0; x--) {
		int i = x - 1;
		o = 1;
		for (; i>0; i--) {
			o = o * 10;
		}
		switch (c[n]) {
		case '1':o = o * 1; break;
		case '2':o = o * 2; break;
		case '3':o = o * 3; break;
		case '4':o = o * 4; break;
		case '5':o = o * 5; break;
		case '6':o = o * 6; break;
		case '7':o = o * 7; break;
		case '8':o = o * 8; break;
		case '9':o = o * 9; break;
		case '0':o = o * 0; break;
		default:o = o * 0; break;
		}
		d = d + o;
		n = n + 1;
	}
	return d;
}
int vale(char* post) {
	num nu;
	int data;
	nu.num = 0;
	char dd[Maxsize];
	int j = 0;
	int i;
	while (*post != '\0') {
		i = 0;
		if (!inop(*post)) {
			while (*post >= '0'&&*post <= '9') {
				dd[i] = post[j];
				post++;
				i++;
			}
			nu.data[nu.num] = aval(dd, i);
			nu.num++;
		}
		switch (*post) {
		case '+':data = nu.data[nu.num - 1];
			nu.num--;
			nu.data[nu.num - 1] = data + nu.data[nu.num - 1];
			break;
		case '*':data = nu.data[nu.num - 1];
			nu.num--;
			nu.data[nu.num - 1] = data*nu.data[nu.num - 1]; break;
		case '-':data = nu.data[nu.num - 1];
			nu.num--;
			nu.data[nu.num - 1] = data - nu.data[nu.num - 1]; break;
		case '/':data = nu.data[nu.num - 1];
			nu.num--;
			nu.data[nu.num - 1] = data / nu.data[nu.num - 1]; break;
		default:break;
		}
		post++;
	}
	return nu.data[0];
}
int main() {
	char cc[Maxsize] = {'7','8','+','2','3','*','9','0'};
	//cin >> cc;
	char cut[Maxsize];// = { '4','6','#','6','7','#','+', '\0' };
	compere(cc,cut);
	cout << vale(cut);
}
